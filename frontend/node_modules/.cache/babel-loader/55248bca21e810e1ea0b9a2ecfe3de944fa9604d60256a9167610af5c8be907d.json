{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Sparsh Mahajan\\\\OneDrive\\\\Documents\\\\c progams\\\\.vscode\\\\.vscode\\\\backend\\\\expensetracker\\\\frontend\\\\src\\\\chart\\\\monthly-chart.js\",\n  _s = $RefreshSig$();\nimport React from \"react\";\nimport { Chart as ChartJS, ArcElement, Tooltip, Legend } from \"chart.js\";\nimport { Bar } from 'react-chartjs-2';\nimport { useGlobalContext } from \"../context/globalcontext\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nChartJS.register(ArcElement, Tooltip, Legend, Bar);\nfunction Chart3() {\n  _s();\n  var date = new Date();\n  var date2 = new Date(date.getFullYear(), date.getMonth(), 1);\n  var date1 = new Date();\n  const {\n    incomes,\n    expenses\n  } = useGlobalContext();\n  incomes.map(income => {\n    const {\n      _id,\n      title,\n      amount,\n      date,\n      Category,\n      note\n    } = income;\n    var x = new Date(income.date);\n    if (x.valueOf() <= date1.valueOf() && x.valueOf() >= date2.valueOf()) {}\n  });\n  var total_monthlyexpense = 0;\n  expenses.map(income => {\n    const {\n      _id,\n      title,\n      amount,\n      date,\n      Category,\n      note\n    } = income;\n    console.log(income);\n    var x = new Date(income.date);\n    if (x.valueOf() <= date1.valueOf() && x.valueOf() >= date2.valueOf()) {}\n  });\n  const data = {\n    labels: [\"income\", \"expense\"],\n    datasets: [{\n      label: 'total income this month',\n      data: 0,\n      borderColor: 'rgb(255, 99, 132)',\n      backgroundColor: 'rgba(255, 99, 132, 0.5)'\n    }, {\n      label: 'Total expense this month',\n      data: 1,\n      borderColor: 'rgb(53, 162, 235)',\n      backgroundColor: 'rgba(53, 162, 235, 0.5)'\n    }]\n  };\n  return /*#__PURE__*/_jsxDEV(Bar, {\n    data: data\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 70,\n    columnNumber: 1\n  }, this);\n}\n_s(Chart3, \"Ob30RFptahZZgYNFjp5wRsA6l7M=\", false, function () {\n  return [useGlobalContext];\n});\n_c = Chart3;\nexport default Chart3;\nvar _c;\n$RefreshReg$(_c, \"Chart3\");","map":{"version":3,"names":["React","Chart","ChartJS","ArcElement","Tooltip","Legend","Bar","useGlobalContext","jsxDEV","_jsxDEV","register","Chart3","_s","date","Date","date2","getFullYear","getMonth","date1","incomes","expenses","map","income","_id","title","amount","Category","note","x","valueOf","total_monthlyexpense","console","log","data","labels","datasets","label","borderColor","backgroundColor","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/Sparsh Mahajan/OneDrive/Documents/c progams/.vscode/.vscode/backend/expensetracker/frontend/src/chart/monthly-chart.js"],"sourcesContent":["import React from \"react\";\r\nimport { Chart as ChartJS, ArcElement, Tooltip, Legend } from \"chart.js\";\r\nimport { Bar } from 'react-chartjs-2';\r\nimport { useGlobalContext } from \"../context/globalcontext\";\r\n\r\nChartJS.register(ArcElement, Tooltip, Legend , Bar);\r\n\r\n\r\nfunction Chart3(){\r\n    var date= new Date() ;\r\n    var date2 = new Date(date.getFullYear(), date.getMonth(), 1);\r\n    var date1= new Date() ;\r\n\r\n    const {incomes , expenses} = useGlobalContext()\r\n \r\n     \r\n         incomes.map((income) => {\r\n            const {_id, title, amount, date, Category, note} = income;\r\n            var x = new Date(income.date)\r\n      \r\n      \r\n          if(x.valueOf()<=date1.valueOf() && x.valueOf() >=date2.valueOf() ){\r\n         \r\n   \r\n    }})\r\n\r\n    var total_monthlyexpense= 0  \r\n     \r\n    expenses.map((income) => {\r\n       const {_id, title, amount, date, Category, note} = income;\r\n       console.log(income)\r\n       var x = new Date(income.date)\r\n \r\n \r\n     if(x.valueOf()<=date1.valueOf() && x.valueOf() >=date2.valueOf() ){\r\n     \r\n\r\n}})\r\n\r\n\r\n\r\n\r\n\r\n \r\n  const data = {\r\n    labels : [\"income\" , \"expense\"] ,\r\n  datasets: [\r\n    {\r\n      label: 'total income this month',\r\n      data: 0 ,\r\n      borderColor: 'rgb(255, 99, 132)',\r\n      backgroundColor: 'rgba(255, 99, 132, 0.5)',\r\n    },\r\n    {\r\n      label: 'Total expense this month',\r\n      data:  1,\r\n      borderColor: 'rgb(53, 162, 235)',\r\n      backgroundColor: 'rgba(53, 162, 235, 0.5)',\r\n    },\r\n  ],\r\n};\r\n\r\n  \r\n  \r\n  \r\n\r\n    return(\r\n      \r\n\r\n<Bar   data={data}/>\r\n    )\r\n}\r\n\r\nexport default Chart3"],"mappings":";;AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,KAAK,IAAIC,OAAO,EAAEC,UAAU,EAAEC,OAAO,EAAEC,MAAM,QAAQ,UAAU;AACxE,SAASC,GAAG,QAAQ,iBAAiB;AACrC,SAASC,gBAAgB,QAAQ,0BAA0B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE5DP,OAAO,CAACQ,QAAQ,CAACP,UAAU,EAAEC,OAAO,EAAEC,MAAM,EAAGC,GAAG,CAAC;AAGnD,SAASK,MAAMA,CAAA,EAAE;EAAAC,EAAA;EACb,IAAIC,IAAI,GAAE,IAAIC,IAAI,CAAC,CAAC;EACpB,IAAIC,KAAK,GAAG,IAAID,IAAI,CAACD,IAAI,CAACG,WAAW,CAAC,CAAC,EAAEH,IAAI,CAACI,QAAQ,CAAC,CAAC,EAAE,CAAC,CAAC;EAC5D,IAAIC,KAAK,GAAE,IAAIJ,IAAI,CAAC,CAAC;EAErB,MAAM;IAACK,OAAO;IAAGC;EAAQ,CAAC,GAAGb,gBAAgB,CAAC,CAAC;EAG1CY,OAAO,CAACE,GAAG,CAAEC,MAAM,IAAK;IACrB,MAAM;MAACC,GAAG;MAAEC,KAAK;MAAEC,MAAM;MAAEZ,IAAI;MAAEa,QAAQ;MAAEC;IAAI,CAAC,GAAGL,MAAM;IACzD,IAAIM,CAAC,GAAG,IAAId,IAAI,CAACQ,MAAM,CAACT,IAAI,CAAC;IAG/B,IAAGe,CAAC,CAACC,OAAO,CAAC,CAAC,IAAEX,KAAK,CAACW,OAAO,CAAC,CAAC,IAAID,CAAC,CAACC,OAAO,CAAC,CAAC,IAAGd,KAAK,CAACc,OAAO,CAAC,CAAC,EAAE,CAGxE;EAAC,CAAC,CAAC;EAEH,IAAIC,oBAAoB,GAAE,CAAC;EAE3BV,QAAQ,CAACC,GAAG,CAAEC,MAAM,IAAK;IACtB,MAAM;MAACC,GAAG;MAAEC,KAAK;MAAEC,MAAM;MAAEZ,IAAI;MAAEa,QAAQ;MAAEC;IAAI,CAAC,GAAGL,MAAM;IACzDS,OAAO,CAACC,GAAG,CAACV,MAAM,CAAC;IACnB,IAAIM,CAAC,GAAG,IAAId,IAAI,CAACQ,MAAM,CAACT,IAAI,CAAC;IAG/B,IAAGe,CAAC,CAACC,OAAO,CAAC,CAAC,IAAEX,KAAK,CAACW,OAAO,CAAC,CAAC,IAAID,CAAC,CAACC,OAAO,CAAC,CAAC,IAAGd,KAAK,CAACc,OAAO,CAAC,CAAC,EAAE,CAGvE;EAAC,CAAC,CAAC;EAOD,MAAMI,IAAI,GAAG;IACXC,MAAM,EAAG,CAAC,QAAQ,EAAG,SAAS,CAAC;IACjCC,QAAQ,EAAE,CACR;MACEC,KAAK,EAAE,yBAAyB;MAChCH,IAAI,EAAE,CAAC;MACPI,WAAW,EAAE,mBAAmB;MAChCC,eAAe,EAAE;IACnB,CAAC,EACD;MACEF,KAAK,EAAE,0BAA0B;MACjCH,IAAI,EAAG,CAAC;MACRI,WAAW,EAAE,mBAAmB;MAChCC,eAAe,EAAE;IACnB,CAAC;EAEL,CAAC;EAMG,oBAGJ7B,OAAA,CAACH,GAAG;IAAG2B,IAAI,EAAEA;EAAK;IAAAM,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAC,CAAC;AAEpB;AAAC9B,EAAA,CA/DQD,MAAM;EAAA,QAKkBJ,gBAAgB;AAAA;AAAAoC,EAAA,GALxChC,MAAM;AAiEf,eAAeA,MAAM;AAAA,IAAAgC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}