{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Sparsh Mahajan\\\\OneDrive\\\\Documents\\\\c progams\\\\.vscode\\\\.vscode\\\\backend\\\\expensetracker\\\\frontend\\\\src\\\\transactions.js\",\n  _s = $RefreshSig$();\nimport React from \"react\";\nimport ReactDatePicker from \"react-datepicker\";\nimport { useGlobalContext } from \"./context/globalcontext\";\nimport 'react-datepicker/dist/react-datepicker.css';\nimport { useState } from \"react\";\nimport { Chart } from \"chart.js\";\nimport axios from \"axios\";\nimport { useEffect } from \"react\";\nimport Item from \"./incomeitem\";\nimport { Chart2 } from \"./chart/chart2\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function Transactions() {\n  _s();\n  const [state1, setstate1] = useState([]);\n  const {\n    incomes,\n    expenses,\n    getIncomes,\n    deleteIncome\n  } = useGlobalContext();\n\n  //i can just check for all income and expenses \n  var date = new Date();\n  var date2 = new Date(date.getFullYear(), date.getMonth(), 1);\n  var date1 = new Date();\n  console.log(\"hello\");\n  incomes.forEach(element => {\n    var x = new Date(element.date);\n    if (x.valueOf() <= date1.valueOf() && x.valueOf() >= date2.valueOf()) {\n      setstate1('hello');\n      return;\n    } else {\n      return;\n    }\n  });\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"income-list\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 3\n    }, this)\n  }, void 0, false);\n} //things to do now map it to chart\n_s(Transactions, \"FZXWP356ZV3VPjhLJKVwGP8Wok4=\", false, function () {\n  return [useGlobalContext];\n});\n_c = Transactions;\nvar _c;\n$RefreshReg$(_c, \"Transactions\");","map":{"version":3,"names":["React","ReactDatePicker","useGlobalContext","useState","Chart","axios","useEffect","Item","Chart2","jsxDEV","_jsxDEV","Fragment","_Fragment","Transactions","_s","state1","setstate1","incomes","expenses","getIncomes","deleteIncome","date","Date","date2","getFullYear","getMonth","date1","console","log","forEach","element","x","valueOf","children","className","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/Sparsh Mahajan/OneDrive/Documents/c progams/.vscode/.vscode/backend/expensetracker/frontend/src/transactions.js"],"sourcesContent":["import React from \"react\";\r\nimport ReactDatePicker from \"react-datepicker\";\r\nimport { useGlobalContext } from \"./context/globalcontext\";\r\nimport 'react-datepicker/dist/react-datepicker.css';\r\nimport { useState } from \"react\";\r\nimport { Chart } from \"chart.js\";\r\nimport axios from \"axios\";\r\nimport { useEffect } from \"react\";\r\nimport Item from \"./incomeitem\";\r\nimport { Chart2 } from \"./chart/chart2\";\r\n\r\n\r\n\r\n\r\n export default function Transactions(){\r\n  const [state1 , setstate1] = useState([])\r\n\r\n    const {incomes , expenses , getIncomes , deleteIncome} = useGlobalContext() ;\r\n   \r\n    \r\n      //i can just check for all income and expenses \r\n      var date = new Date();\r\n      var date2 = new Date(date.getFullYear(), date.getMonth(), 1);\r\n      var date1= new Date() ;\r\n      \r\n   console.log(\"hello\") ;\r\n  \r\n    \r\n   incomes.forEach(element => {\r\n    var x = new Date(element.date)\r\n    if(x.valueOf()<=date1.valueOf() && x.valueOf() >=date2.valueOf() ){\r\n    setstate1('hello') ;\r\n     return\r\n    }\r\n    else{\r\n      return \r\n    }\r\n   })\r\n\r\n\r\n      \r\n      return (<>\r\n    \r\n  <div className='income-list'>\r\n  \r\n</div>\r\n\r\n\r\n    \r\n  \r\n \r\n</>\r\n      )\r\n    } //things to do now map it to chart\r\n  "],"mappings":";;AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,eAAe,MAAM,kBAAkB;AAC9C,SAASC,gBAAgB,QAAQ,yBAAyB;AAC1D,OAAO,4CAA4C;AACnD,SAASC,QAAQ,QAAQ,OAAO;AAChC,SAASC,KAAK,QAAQ,UAAU;AAChC,OAAOC,KAAK,MAAM,OAAO;AACzB,SAASC,SAAS,QAAQ,OAAO;AACjC,OAAOC,IAAI,MAAM,cAAc;AAC/B,SAASC,MAAM,QAAQ,gBAAgB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AAKvC,eAAe,SAASC,YAAYA,CAAA,EAAE;EAAAC,EAAA;EACrC,MAAM,CAACC,MAAM,EAAGC,SAAS,CAAC,GAAGb,QAAQ,CAAC,EAAE,CAAC;EAEvC,MAAM;IAACc,OAAO;IAAGC,QAAQ;IAAGC,UAAU;IAAGC;EAAY,CAAC,GAAGlB,gBAAgB,CAAC,CAAC;;EAGzE;EACA,IAAImB,IAAI,GAAG,IAAIC,IAAI,CAAC,CAAC;EACrB,IAAIC,KAAK,GAAG,IAAID,IAAI,CAACD,IAAI,CAACG,WAAW,CAAC,CAAC,EAAEH,IAAI,CAACI,QAAQ,CAAC,CAAC,EAAE,CAAC,CAAC;EAC5D,IAAIC,KAAK,GAAE,IAAIJ,IAAI,CAAC,CAAC;EAExBK,OAAO,CAACC,GAAG,CAAC,OAAO,CAAC;EAGpBX,OAAO,CAACY,OAAO,CAACC,OAAO,IAAI;IAC1B,IAAIC,CAAC,GAAG,IAAIT,IAAI,CAACQ,OAAO,CAACT,IAAI,CAAC;IAC9B,IAAGU,CAAC,CAACC,OAAO,CAAC,CAAC,IAAEN,KAAK,CAACM,OAAO,CAAC,CAAC,IAAID,CAAC,CAACC,OAAO,CAAC,CAAC,IAAGT,KAAK,CAACS,OAAO,CAAC,CAAC,EAAE;MAClEhB,SAAS,CAAC,OAAO,CAAC;MACjB;IACD,CAAC,MACG;MACF;IACF;EACD,CAAC,CAAC;EAIC,oBAAQN,OAAA,CAAAE,SAAA;IAAAqB,QAAA,eAEZvB,OAAA;MAAKwB,SAAS,EAAC;IAAa;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAEzB;EAAC,gBAMJ,CAAC;AAEC,CAAC,CAAC;AAAAxB,EAAA,CAvCmBD,YAAY;EAAA,QAGwBX,gBAAgB;AAAA;AAAAqC,EAAA,GAHpD1B,YAAY;AAAA,IAAA0B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}